import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import cv2
import numpy as np
import easyocr
import os
from ultralytics import YOLO
from PIL import Image, ImageTk
import threading

class LicensePlateDetectorGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üöó Nh·∫≠n Di·ªán Bi·ªÉn S·ªë Xe - YOLO v8")
        self.root.geometry("1200x800")
        self.root.configure(bg='#f0f0f0')
        
        # Kh·ªüi t·∫°o model v√† reader
        self.model = None
        self.reader = None
        self.current_image = None
        self.result_image = None
        
        # T·∫°o giao di·ªán
        self.create_widgets()
        
        # Kh·ªüi t·∫°o model trong thread ri√™ng
        self.init_models()
    
    def create_widgets(self):
        # Header
        header_frame = tk.Frame(self.root, bg='#2c3e50', height=80)
        header_frame.pack(fill='x', padx=10, pady=10)
        header_frame.pack_propagate(False)
        
        title_label = tk.Label(header_frame, text="üöó H·ªÜ TH·ªêNG NH·∫¨N DI·ªÜN BI·ªÇN S·ªê XE", 
                              font=('Arial', 20, 'bold'), fg='white', bg='#2c3e50')
        title_label.pack(expand=True)
        
        # Main content frame
        main_frame = tk.Frame(self.root, bg='#f0f0f0')
        main_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # Left panel - Controls
        left_panel = tk.Frame(main_frame, bg='white', relief='raised', bd=2)
        left_panel.pack(side='left', fill='y', padx=(0, 10))
        
        # Control buttons
        controls_frame = tk.LabelFrame(left_panel, text="üéõÔ∏è ƒêi·ªÅu Khi·ªÉn", 
                                     font=('Arial', 12, 'bold'), bg='white', fg='#2c3e50')
        controls_frame.pack(fill='x', padx=15, pady=15)
        
        # Upload button
        self.upload_btn = tk.Button(controls_frame, text="üìÅ T·∫£i ·∫¢nh L√™n", 
                                   command=self.upload_image, 
                                   font=('Arial', 11), bg='#3498db', fg='white',
                                   relief='flat', padx=20, pady=10)
        self.upload_btn.pack(fill='x', padx=10, pady=5)
        
        # Detect button
        self.detect_btn = tk.Button(controls_frame, text="üîç Nh·∫≠n Di·ªán", 
                                   command=self.detect_license_plate, 
                                   font=('Arial', 11), bg='#27ae60', fg='white',
                                   relief='flat', padx=20, pady=10, state='disabled')
        self.detect_btn.pack(fill='x', padx=10, pady=5)
        
        # Save button
        self.save_btn = tk.Button(controls_frame, text="üíæ L∆∞u K·∫øt Qu·∫£", 
                                 command=self.save_result, 
                                 font=('Arial', 11), bg='#f39c12', fg='white',
                                 relief='flat', padx=20, pady=10, state='disabled')
        self.save_btn.pack(fill='x', padx=10, pady=5)
        
        # Clear button
        self.clear_btn = tk.Button(controls_frame, text="üóëÔ∏è X√≥a", 
                                  command=self.clear_all, 
                                  font=('Arial', 11), bg='#e74c3c', fg='white',
                                  relief='flat', padx=20, pady=10)
        self.clear_btn.pack(fill='x', padx=10, pady=5)
        
        # Status frame
        status_frame = tk.LabelFrame(left_panel, text="üìä Tr·∫°ng Th√°i", 
                                   font=('Arial', 12, 'bold'), bg='white', fg='#2c3e50')
        status_frame.pack(fill='x', padx=15, pady=15)
        
        self.status_label = tk.Label(status_frame, text="‚è≥ ƒêang kh·ªüi t·∫°o...", 
                                    font=('Arial', 10), bg='white', fg='#7f8c8d')
        self.status_label.pack(padx=10, pady=10)
        
        # Progress bar
        self.progress = ttk.Progressbar(status_frame, mode='indeterminate')
        self.progress.pack(fill='x', padx=10, pady=(0, 10))
        
        # Results frame
        results_frame = tk.LabelFrame(left_panel, text="üéØ K·∫øt Qu·∫£", 
                                    font=('Arial', 12, 'bold'), bg='white', fg='#2c3e50')
        results_frame.pack(fill='x', padx=15, pady=15)
        
        self.result_text = tk.Text(results_frame, height=8, width=30, 
                                  font=('Arial', 10), bg='#ecf0f1', fg='#2c3e50')
        self.result_text.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Right panel - Image display
        right_panel = tk.Frame(main_frame, bg='white', relief='raised', bd=2)
        right_panel.pack(side='right', fill='both', expand=True)
        
        # Image display frame
        image_frame = tk.LabelFrame(right_panel, text="üñºÔ∏è Hi·ªÉn Th·ªã ·∫¢nh", 
                                  font=('Arial', 12, 'bold'), bg='white', fg='#2c3e50')
        image_frame.pack(fill='both', expand=True, padx=15, pady=15)
        
        # Canvas for image display
        self.canvas = tk.Canvas(image_frame, bg='#ecf0f1', relief='sunken', bd=2)
        self.canvas.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Scrollbars for canvas
        h_scrollbar = tk.Scrollbar(image_frame, orient='horizontal', command=self.canvas.xview)
        v_scrollbar = tk.Scrollbar(image_frame, orient='vertical', command=self.canvas.yview)
        self.canvas.configure(xscrollcommand=h_scrollbar.set, yscrollcommand=v_scrollbar.set)
        
        h_scrollbar.pack(side='bottom', fill='x')
        v_scrollbar.pack(side='right', fill='y')
        
        # Footer
        footer_frame = tk.Frame(self.root, bg='#34495e', height=40)
        footer_frame.pack(fill='x', side='bottom')
        footer_frame.pack_propagate(False)
        
        footer_label = tk.Label(footer_frame, text="¬© 2024 H·ªá Th·ªëng Nh·∫≠n Di·ªán Bi·ªÉn S·ªë Xe - YOLO v8", 
                               font=('Arial', 9), fg='white', bg='#34495e')
        footer_label.pack(expand=True)
    
    def init_models(self):
        """Kh·ªüi t·∫°o model YOLO v√† EasyOCR trong thread ri√™ng"""
        def load_models():
            try:
                self.status_label.config(text="üîÑ ƒêang t·∫£i model YOLO...")
                self.progress.start()
                
                # Load YOLO model
                self.model = YOLO("best.pt")
                
                self.status_label.config(text="üîÑ ƒêang t·∫£i EasyOCR...")
                
                # Load EasyOCR
                self.reader = easyocr.Reader(['en'])
                
                self.status_label.config(text="‚úÖ S·∫µn s√†ng nh·∫≠n di·ªán!")
                self.progress.stop()
                self.upload_btn.config(state='normal')
                
            except Exception as e:
                self.status_label.config(text=f"‚ùå L·ªói: {str(e)}")
                self.progress.stop()
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o model:\n{str(e)}")
        
        # Ch·∫°y trong thread ri√™ng ƒë·ªÉ kh√¥ng block GUI
        threading.Thread(target=load_models, daemon=True).start()
    
    def upload_image(self):
        """Upload ·∫£nh t·ª´ file"""
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn ·∫£nh bi·ªÉn s·ªë xe",
            filetypes=[
                ("·∫¢nh", "*.jpg *.jpeg *.png *.bmp *.tiff"),
                ("T·∫•t c·∫£", "*.*")
            ]
        )
        
        if file_path:
            try:
                # ƒê·ªçc ·∫£nh
                self.current_image = cv2.imread(file_path)
                if self.current_image is None:
                    raise Exception("Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh")
                
                # Hi·ªÉn th·ªã ·∫£nh
                self.display_image(self.current_image)
                
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i
                self.status_label.config(text=f"üìÅ ƒê√£ t·∫£i: {os.path.basename(file_path)}")
                self.detect_btn.config(state='normal')
                
                # X√≥a k·∫øt qu·∫£ c≈©
                self.result_text.delete(1.0, tk.END)
                self.result_text.insert(tk.END, "·∫¢nh ƒë√£ s·∫µn s√†ng ƒë·ªÉ nh·∫≠n di·ªán!\n")
                
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i ·∫£nh:\n{str(e)}")
    
    def display_image(self, image):
        """Hi·ªÉn th·ªã ·∫£nh tr√™n canvas"""
        # Resize ·∫£nh ƒë·ªÉ v·ª´a v·ªõi canvas
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        
        if canvas_width <= 1:  # Canvas ch∆∞a ƒë∆∞·ª£c render
            canvas_width = 600
            canvas_height = 400
        
        # T√≠nh t·ª∑ l·ªá resize
        img_height, img_width = image.shape[:2]
        scale = min(canvas_width / img_width, canvas_height / img_height)
        
        if scale < 1:
            new_width = int(img_width * scale)
            new_height = int(img_height * scale)
            image_resized = cv2.resize(image, (new_width, new_height))
        else:
            image_resized = image
        
        # Chuy·ªÉn ƒë·ªïi BGR sang RGB
        image_rgb = cv2.cvtColor(image_resized, cv2.COLOR_BGR2RGB)
        
        # Chuy·ªÉn sang PIL Image
        pil_image = Image.fromarray(image_rgb)
        self.photo = ImageTk.PhotoImage(pil_image)
        
        # Hi·ªÉn th·ªã tr√™n canvas
        self.canvas.delete("all")
        self.canvas.create_image(
            canvas_width // 2, canvas_height // 2,
            image=self.photo, anchor='center'
        )
        
        # C·∫≠p nh·∫≠t scroll region
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))
    
    def detect_license_plate(self):
        """Nh·∫≠n di·ªán bi·ªÉn s·ªë xe"""
        if self.current_image is None or self.model is None:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng t·∫£i ·∫£nh tr∆∞·ªõc!")
            return
        
        # Disable buttons trong qu√° tr√¨nh x·ª≠ l√Ω
        self.detect_btn.config(state='disabled')
        self.upload_btn.config(state='disabled')
        self.status_label.config(text="üîç ƒêang nh·∫≠n di·ªán...")
        self.progress.start()
        
        # Ch·∫°y nh·∫≠n di·ªán trong thread ri√™ng
        threading.Thread(target=self._detect_thread, daemon=True).start()
    
    def _detect_thread(self):
        """Thread x·ª≠ l√Ω nh·∫≠n di·ªán"""
        try:
            # Nh·∫≠n di·ªán v·ªõi YOLO
            results = self.model.predict(source=self.current_image, show=False)
            
            # T·∫°o b·∫£n sao ·∫£nh ƒë·ªÉ v·∫Ω k·∫øt qu·∫£
            result_image = self.current_image.copy()
            detected_plates = []
            
            # X·ª≠ l√Ω k·∫øt qu·∫£
            for result in results:
                boxes = result.boxes.xyxy
                confidences = result.boxes.conf
                
                for i, (box, confidence) in enumerate(zip(boxes, confidences)):
                    if confidence > 0.25:
                        x1, y1, x2, y2 = map(int, box)
                        
                        # Crop bi·ªÉn s·ªë
                        cropped_plate = self.current_image[y1:y2, x1:x2]
                        
                        # Preprocessing
                        enhanced_plate = self.enhance_image(cropped_plate)
                        
                        # OCR
                        text_results = self.reader.readtext(enhanced_plate)
                        
                        if text_results:
                            # S·∫Øp x·∫øp theo v·ªã tr√≠ Y
                            text_with_positions = []
                            for (bbox, text, prob) in text_results:
                                if prob > 0.2:
                                    y_pos = np.mean([point[1] for point in bbox])
                                    text_with_positions.append((text, prob, y_pos))
                            
                            text_with_positions.sort(key=lambda x: x[2])
                            
                            if len(text_with_positions) >= 2:
                                plate_text = f"{text_with_positions[0][0]} {text_with_positions[1][0]}"
                            elif len(text_with_positions) == 1:
                                plate_text = text_with_positions[0][0]
                            else:
                                plate_text = "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c"
                            
                            detected_plates.append({
                                'text': plate_text,
                                'confidence': confidence,
                                'box': (x1, y1, x2, y2)
                            })
                            
                            # V·∫Ω bounding box v√† text
                            cv2.rectangle(result_image, (x1, y1), (x2, y2), (0, 255, 0), 2)
                            cv2.putText(result_image, plate_text, (x1, y1 - 10), 
                                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            
            # C·∫≠p nh·∫≠t GUI trong main thread
            self.root.after(0, lambda: self._update_results(result_image, detected_plates))
            
        except Exception as e:
            self.root.after(0, lambda: self._show_error(f"L·ªói nh·∫≠n di·ªán: {str(e)}"))
    
    def enhance_image(self, image):
        """TƒÉng c∆∞·ªùng ch·∫•t l∆∞·ª£ng ·∫£nh"""
        # TƒÉng k√≠ch th∆∞·ªõc
        scale_factor = 3
        height, width = image.shape[:2]
        new_width = width * scale_factor
        new_height = height * scale_factor
        
        resized = cv2.resize(image, (new_width, new_height), interpolation=cv2.INTER_CUBIC)
        
        # L√†m m·ªãn
        smoothed = cv2.GaussianBlur(resized, (3, 3), 0)
        
        # TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n
        lab = cv2.cvtColor(smoothed, cv2.COLOR_BGR2LAB)
        l, a, b = cv2.split(lab)
        clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
        cl = clahe.apply(l)
        enhanced = cv2.merge((cl,a,b))
        
        return cv2.cvtColor(enhanced, cv2.COLOR_LAB2BGR)
    
    def _update_results(self, result_image, detected_plates):
        """C·∫≠p nh·∫≠t k·∫øt qu·∫£ l√™n GUI"""
        self.result_image = result_image
        self.display_image(result_image)
        
        # C·∫≠p nh·∫≠t text k·∫øt qu·∫£
        self.result_text.delete(1.0, tk.END)
        
        if detected_plates:
            self.result_text.insert(tk.END, f"üéØ T√¨m th·∫•y {len(detected_plates)} bi·ªÉn s·ªë:\n\n")
            for i, plate in enumerate(detected_plates, 1):
                self.result_text.insert(tk.END, f"Bi·ªÉn s·ªë #{i}:\n")
                self.result_text.insert(tk.END, f"  VƒÉn b·∫£n: {plate['text']}\n")
                self.result_text.insert(tk.END, f"  ƒê·ªô tin c·∫≠y: {plate['confidence']:.2f}\n\n")
        else:
            self.result_text.insert(tk.END, "‚ùå Kh√¥ng t√¨m th·∫•y bi·ªÉn s·ªë xe trong ·∫£nh")
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i
        self.status_label.config(text="‚úÖ Ho√†n th√†nh nh·∫≠n di·ªán!")
        self.progress.stop()
        
        # Enable buttons
        self.detect_btn.config(state='normal')
        self.upload_btn.config(state='normal')
        self.save_btn.config(state='normal')
    
    def _show_error(self, error_msg):
        """Hi·ªÉn th·ªã l·ªói"""
        self.status_label.config(text="‚ùå C√≥ l·ªói x·∫£y ra!")
        self.progress.stop()
        self.detect_btn.config(state='normal')
        self.upload_btn.config(state='normal')
        messagebox.showerror("L·ªói", error_msg)
    
    def save_result(self):
        """L∆∞u ·∫£nh k·∫øt qu·∫£"""
        if self.result_image is None:
            messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ l∆∞u!")
            return
        
        file_path = filedialog.asksaveasfilename(
            title="L∆∞u ·∫£nh k·∫øt qu·∫£",
            defaultextension=".jpg",
            filetypes=[
                ("JPEG", "*.jpg"),
                ("PNG", "*.png"),
                ("T·∫•t c·∫£", "*.*")
            ]
        )
        
        if file_path:
            try:
                cv2.imwrite(file_path, self.result_image)
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ l∆∞u ·∫£nh k·∫øt qu·∫£ v√†o:\n{file_path}")
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l∆∞u ·∫£nh:\n{str(e)}")
    
    def clear_all(self):
        """X√≥a t·∫•t c·∫£"""
        self.current_image = None
        self.result_image = None
        self.canvas.delete("all")
        self.result_text.delete(1.0, tk.END)
        self.status_label.config(text="‚úÖ S·∫µn s√†ng nh·∫≠n di·ªán!")
        self.detect_btn.config(state='disabled')
        self.save_btn.config(state='disabled')
        self.upload_btn.config(state='normal')
    
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        self.root.mainloop()

if __name__ == "__main__":
    app = LicensePlateDetectorGUI()
    app.run()
